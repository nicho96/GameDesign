package ca.nicho.server.world;

import java.util.HashMap;
import java.util.Map;

import ca.nicho.client.SpriteSheet;
import ca.nicho.client.entity.Entity;
import ca.nicho.client.entity.EntityEnemy;
import ca.nicho.client.entity.EntityPlayer;
import ca.nicho.client.packet.EntityPacket;
import ca.nicho.server.ServerStart;

public class ServerWorld {

	public GameClock clock;
	public int entId;
	public HashMap<Integer, Entity> entities = new HashMap<Integer, Entity>();
	
	public ServerWorld(){
		this.spawnEntity(new EntityEnemy(200, 200, 200));
		clock = new GameClock();
	}
	
	public void startClock(){
		new Thread(clock).start();
	}
	
	public void spawnEntity(Entity ent){
		entities.put(ent.id, ent);
		for(Map.Entry<Integer, Entity> set : entities.entrySet()){
			EntityPacket packet = new EntityPacket(set.getValue());
			ServerStart.sendGlobalPacket(packet);
		}
	}
	
	public void entityUpdatePacketRecieved(EntityPacket packet){
		System.out.println(packet);
		Entity ent = null;
		if(entities.containsKey(packet.id)){
			//Entity exists, update it's values. If not, create a new entity.
			ent = entities.get(packet.id);
			ent.locX = packet.x;
			ent.locY = packet.y;
		}else{
			ent = null;
			switch(packet.type){
				case SpriteSheet.ENTITY_PLAYER:
					ent = new EntityPlayer(packet.x, packet.y, packet.id);
					break;
			}
			if(ent != null){
				spawnEntity(ent);
			}else{
				System.out.println("World: Tried to spawn a null entity (packet malformed?)");
			}
		}
		
		if(ent != null){
			ServerStart.sendGlobalPacket(new EntityPacket(ent));
		}
		
	}
	
	public void killEntity(int id){
		entities.remove(id);
	}
	
	private void tick(){
		for(Map.Entry<Integer, Entity> ent : entities.entrySet()){
			if(ent.getValue().tick()){
				ServerStart.sendGlobalPacket(new EntityPacket(ent.getValue()));
			}
		}
	}
	
	private class GameClock implements Runnable{
		
		public boolean running = true;
		
		@Override
		public void run(){
			
			long last = System.currentTimeMillis();
			while(running){
				long current = System.currentTimeMillis();
				if(current - last > 30){
					last = current;
					tick();
				}
			}
		}
		
	}

}
