package ca.nicho.server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

import ca.nicho.client.entity.EntityPlayer;
import ca.nicho.client.packet.EntityPacket;
import ca.nicho.client.packet.Packet;

public class ServerGameSocket implements Runnable{

	public Socket socket;
	public DataInputStream in;
	public DataOutputStream out;
	
	public ServerGameSocket(Socket socket){
		this.socket = socket;
		try {
			this.in = new DataInputStream(socket.getInputStream());
			this.out = new DataOutputStream(socket.getOutputStream());
		} catch (IOException e) {
			//Remove from list of connections
			e.printStackTrace();
		}
		
	}

	@Override
	public void run() {
		int id = Game.world.entId++;
		try{
		out.writeInt(id); //Send the entity id of the user back to the client
		}catch(IOException e){
			e.printStackTrace();
		}
		Game.world.spawnEntity(new EntityPlayer((int)(Math.random() * 800), 200, id)); //Spawn the user into the world
		while(true){
			try{
				readPacket();
			}catch(IOException e){
				System.out.println("ServerGameSocket: Client disconnected");
				if(ServerStart.con1 == this)
					ServerStart.con1 = null;
				else if(ServerStart.con2 == this)
					ServerStart.con2 = null;
				break;
			}
		}
	}
	
	/**
	 * Reads the packet data, and parses it out, instantiating the appropriate packet object
	 */
	public void readPacket() throws IOException{
		int type = in.readInt();
		int length = in.readInt();
		byte[] data = new byte[length];
		in.read(data);
			
		switch(type){
			case Packet.PACKET_ENTITY:
				Game.world.entityUpdatePacketRecieved(new EntityPacket(data));
				break;	
		}
	}	
	
	public void sendPacket(Packet packet){
		try{
			out.writeInt(packet.packetType);
			byte[] data = packet.getPacketData();
			out.writeInt(data.length);
			out.write(data);
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	
	
	
}
